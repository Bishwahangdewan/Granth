"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var utils_1 = require("./utils");
var IndexPage = /** @class */ (function (_super) {
    __extends(IndexPage, _super);
    function IndexPage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {};
        _this.sectionsRefs = utils_1.mapValues(function () { return React.createRef(); }, _this.props.elements);
        _this.handleFindActiveElement = utils_1.throttle(100, function () {
            var html = document.documentElement;
            var windowHeight = window.innerHeight || html.clientHeight;
            var rects = utils_1.mapValues(function (sectionsRef) {
                if (sectionsRef.current) {
                    return sectionsRef.current.getBoundingClientRect();
                }
            }, _this.sectionsRefs);
            var elementInViewBoundaries = utils_1.mapValues(utils_1.getComponentBounds(windowHeight), rects);
            var elementInViewHeight = utils_1.mapValues(function (bounds) { return bounds.bottom - bounds.top; }, elementInViewBoundaries);
            var maxHeight = Math.max.apply(Math, Object.values(elementInViewHeight));
            var mostInTheViewElementKey = utils_1.findKey(maxHeight, elementInViewHeight);
            if (_this.state.activeElement !== mostInTheViewElementKey) {
                _this.setState({ activeElement: mostInTheViewElementKey });
            }
        });
        _this.goTo = function (scrollTo, behavior, offset) {
            if (behavior === void 0) { behavior = "smooth"; }
            // exit if element doesn't exist
            if (scrollTo === "string" && !_this.sectionsRefs[scrollTo].current) {
                return;
            }
            var scrollToPosition = typeof scrollTo === "number"
                ? scrollTo
                : _this.sectionsRefs[scrollTo].current.offsetTop;
            if (_this.props.offset) {
                scrollToPosition += _this.props.offset;
            }
            if (offset) {
                scrollToPosition += offset;
            }
            window.scrollTo({
                top: scrollToPosition,
                behavior: behavior
            });
            if (_this.props.shouldEnableHistory && typeof scrollTo === "string") {
                var modifyHistoryMethod = _this.props.shouldModifyUrl
                    ? window.history.pushState
                    : window.history.replaceState;
                modifyHistoryMethod(undefined, "", "#" + scrollTo);
            }
        };
        return _this;
    }
    IndexPage.prototype.componentDidMount = function () {
        this.attachListener();
        this.handleFindActiveElement();
        var elementFromHash = window.location.hash.replace("#", "");
        if (Object.keys(this.sectionsRefs).includes(elementFromHash)) {
            this.goTo(elementFromHash);
        }
    };
    IndexPage.prototype.componentWillUnmount = function () {
        this.removeListener();
    };
    IndexPage.prototype.attachListener = function () {
        window.addEventListener("scroll", this.handleFindActiveElement);
        window.addEventListener("resize", this.handleFindActiveElement);
    };
    IndexPage.prototype.removeListener = function () {
        window.removeEventListener("scroll", this.handleFindActiveElement);
        window.removeEventListener("resize", this.handleFindActiveElement);
    };
    IndexPage.prototype.render = function () {
        return this.props.children({
            activeElement: this.state.activeElement,
            refs: this.sectionsRefs,
            goTo: this.goTo
        });
    };
    return IndexPage;
}(React.Component));
exports.default = IndexPage;
