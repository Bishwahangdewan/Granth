"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * lodash-like mapValues function
 * Returns new object with same keys
 * and each value equal to result of running it through provided callback
 */
function mapValues(callback, obj) {
    var mappedObject = {};
    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
        var key = _a[_i];
        mappedObject[key] = callback(obj[key]);
    }
    return mappedObject;
}
exports.mapValues = mapValues;
/**
 * lodash-like mapValues function
 * Returns key of value matching search input
 */
function findKey(value, obj) {
    for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
        var key = _a[_i];
        if (obj[key] === value) {
            return key;
        }
    }
}
exports.findKey = findKey;
/**
 * Just a throttle function
 */
function throttle(delay, fn) {
    var lastCall = 0;
    var timeout = null;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var now = new Date().getTime();
        if (now - lastCall < delay) {
            if (timeout) {
                clearTimeout(timeout);
            }
            timeout = setTimeout(function () {
                lastCall = now;
                fn.apply(void 0, args);
            }, delay);
            return;
        }
        lastCall = now;
        return fn.apply(void 0, args);
    };
}
exports.throttle = throttle;
/**
 * Helper for calculating top and bottom position of element within the screen
 * based on result of getBoundingClientRect
 */
exports.getComponentBounds = function (windowHeight) { return function (rect) {
    // ELEMENT PRE TOP SCREEN EDGE
    // when top of the element is below top of the screen and above bottom of the screen
    if (rect.top >= 0 && rect.top <= windowHeight) {
        return {
            top: rect.top,
            // bottom equals bottom of the element or bottom of the screen
            bottom: Math.min(rect.bottom, windowHeight)
        };
    }
    // ELEMENT PAST TOP SCREEN EDGE
    // when top of element is above top screen edge but bottom of the element is still inside
    if (rect.top <= 0 && rect.top + rect.height >= 0) {
        return {
            top: 0,
            bottom: Math.min(rect.top + rect.height, windowHeight)
        };
    }
    // outside of the screen
    return { top: -1, bottom: -1 };
}; };
