import * as React from "react";
export declare type ISectionRefs<T> = {
    [key in keyof T]: React.RefObject<HTMLDivElement>;
};
export interface IElements {
    [elementName: string]: object;
}
export interface IProps<T> {
    children: (Props: {
        activeElement?: keyof T;
        refs: ISectionRefs<T>;
        goTo: (elementKey: keyof T) => void;
    }) => JSX.Element | null;
    elements: T;
    shouldEnableHistory?: boolean;
    shouldModifyUrl?: boolean;
    offset?: number;
}
export interface IState<T> {
    activeElement?: keyof T;
}
declare class IndexPage<T extends IElements> extends React.Component<IProps<T>, IState<T>> {
    state: IState<T>;
    sectionsRefs: ISectionRefs<T>;
    handleFindActiveElement: (...args: any[]) => any;
    componentDidMount(): void;
    componentWillUnmount(): void;
    attachListener(): void;
    removeListener(): void;
    goTo: (scrollTo: number | keyof T, behavior?: "auto" | "smooth" | undefined, offset?: number | undefined) => void;
    render(): JSX.Element | null;
}
export default IndexPage;
